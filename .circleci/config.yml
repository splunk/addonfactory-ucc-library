version: 2.1

orbs:
  python: circleci/python@0.2.1

executors:
  linux:
    machine:
      image: ubuntu-1604:201903-01
jobs:
  build:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - restore_cache:
          keys:
            - poetry-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Install Tools
          command: |
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      - run:
          name: Build
          command: |
            source $HOME/.poetry/env
            poetry install
            poetry run poetry-dynamic-versioning
            poetry build
      - save_cache:
          key: poetry-cache-{{ checksum "poetry.lock" }}
          paths:
            - ~/.cache/pypoetry
      - store_artifacts:
          path: dist
      - store_artifacts:
          path: output
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - dist
            - output

  semgrep:
    environment:
        SEMGREP_REPO_URL: << pipeline.project.git_url >>
        SEMGREP_BRANCH: << pipeline.git.branch >>
    docker:
      - image: returntocorp/semgrep-agent:v1
        user: root
    steps:
      - checkout
      - run:
          name: "Install Dependencies"
          command: |
            pip3 install --upgrade semgrep
      - run:
          name: "Semgrep Scan"
          no_output_timeout: 1h
          command: |
            export SEMGREP_REPO_NAME=splunk/${CIRCLE_PROJECT_REPONAME}
            python -m semgrep_agent --publish-deployment ${SEMGREP_DEPLOYMENT_ID} --publish-token ${SEMGREP_PUBLISH_TOKEN}
            # Generate the Semgrep Dashboard URL
            export REPO_BRANCH=$(echo "<< pipeline.git.branch >>")
            DASHBOARD_URL=$(python3 -c "from urllib.parse import quote; import os; print('https://semgrep.dev/manage/findings?repo=' + quote(os.environ['SEMGREP_REPO_NAME'], safe='') + '&tab=findings&ref_type=branch&ref=' + quote(os.environ['REPO_BRANCH'], safe=''))")
            echo "View Result at Semgrep Dashboard: $DASHBOARD_URL"
            
            # Semgrep Exclude files
            dos2unix .semgrepignore
            SEMGREP_EXCLUDE=$(sed "/^#/d" .semgrepignore | sed "/^:/d" | sed -r '/^\s*$/d' | sed ':a;N;$!ba;s/\n/ --exclude /g')
            echo "Excluding Semgrep Files: --exclude $SEMGREP_EXCLUDE"
            # Generate xml file
            semgrep --config="p/r2c-ci" --config="p/r2c-security-audit" --config="p/bandit" --error --strict --timeout=0 --junit-xml -o /root/project/test-results/semgrep-scan.xml --exclude $SEMGREP_EXCLUDE     
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results
          
  release:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - run: npx semantic-release

  publish-pypi:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - restore_cache:
          keys:
            - poetry-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Install Tools
          command: |
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      - run:
          name: Build
          command: |
            source $HOME/.poetry/env
            poetry install
            poetry run poetry-dynamic-versioning
            poetry publish --build -u ${PYPI_USERNAME} -p ${PYPI_TOKEN}

workflows:
  main:
    jobs:
      - build
      - semgrep:
          context:
            - gdi-semgrep      
          filters:
            branches:
              only: /.*/
      - release:
          context:
            - gdi-github
          requires:
            - build
  publish:
    jobs:
      - publish-pypi:
          context:     
            - gdi-pypi
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*.*$/
